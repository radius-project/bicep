name: Radius Build

on:
  push:
    branches: [bicep-extensibility]
    tags:
      - v*
  pull_request:
    branches: [bicep-extensibility]
  workflow_dispatch:

env:
  CI: true
  # don't print dotnet logo
  DOTNET_NOLOGO: true
  # disable telemetry (reduces dotnet tool output in logs)
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      # let us get failures from other jobs even if one fails
      fail-fast: true

      # should be the full list of supported RIDs with customizations expressed via the parameters under each item
      matrix:
        include:
          - name: windows-x64
            id: win-x64
          - name: windows-arm64
            id: win-arm64
          - name: linux-x64
            id: linux-x64
          - name: linux-arm
            id: linux-arm
          - name: linux-arm64
            id: linux-arm64
          - name: macos-x64
            id: osx-x64
          - name: macos-arm64
            id: osx-arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
          submodules: true
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py\

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3

      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ matrix.id }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ matrix.id }}-nuget

      - name: Publish Bicep ${{ matrix.id }}
        run: >
          dotnet publish ./src/Bicep.Cli/Bicep.Cli.csproj 
          --configuration Release 
          --self-contained true 
          -p:PublishTrimmed=true 
          -p:PublishSingleFile=true 
          -p:TrimmerDefaultAction=copyused 
          -p:SuppressTrimAnalysisWarnings=true 
          -r ${{ matrix.id }}
          -o ./artifacts/bicep/${{ matrix.name }}

      - name: Publish Language Server
        if: matrix.id == 'linux-x64'
        run: >
          dotnet publish --configuration release 
          ./src/Bicep.LangServer/Bicep.LangServer.csproj 
          -o "./src/vscode-bicep/bicepLanguageServer"

      - name: Test
        if: matrix.id == 'linux-x64'
        run: dotnet test --configuration release --blame --collect:"XPlat Code Coverage" --settings ./.github/workflows/codecov.runsettings --results-directory ./TestResults/

      - name: Upload Test Results
        if: matrix.id == 'linux-x64'
        uses: actions/upload-artifact@v3
        with:
          name: Bicep.TestResults
          path: ./TestResults/**/*.trx

      - name: Setup Node
        if: matrix.id == 'linux-x64'
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: npm ci
        if: matrix.id == 'linux-x64'
        run: npm ci
        working-directory: ./src/vscode-bicep

      - name: Enable params
        if: matrix.id == 'linux-x64'
        run: npm run params
        working-directory: ./src/vscode-bicep

      - name: Run lint
        if: matrix.id == 'linux-x64'
        run: npm run lint
        working-directory: ./src/vscode-bicep

      - name: Run unit tests
        if: matrix.id == 'linux-x64'
        run: npm run test:unit
        working-directory: ./src/vscode-bicep

      - name: Run snapshot tests
        if: matrix.id == 'linux-x64'
        run: npm run test:snapshot
        working-directory: ./src/vscode-bicep

      - name: Build prod
        if: matrix.id == 'linux-x64'
        run: npm run build:prod
        working-directory: ./src/vscode-bicep

      # Comment out while we troubleshoot the root cause of e2e errors
      # - name: Build E2E tests
      #   run: npm run build:e2e
      #   working-directory: ./src/vscode-bicep

      # - name: Run E2E tests
      #   run: xvfb-run -a npm run test:e2e
      #   working-directory: ./src/vscode-bicep

      # - name: Show extension logs of E2E tests
      #   run: cat ./bicep.log
      #   if: always()
      #   working-directory: ./src/vscode-bicep

      - name: Create VSIX
        if: matrix.id == 'linux-x64'
        run: npm run package
        working-directory: ./src/vscode-bicep

      - name: Copy VSIX
        if: matrix.id == 'linux-x64'
        run: >
         mkdir -p ./artifacts/vscode && 
         cp ./src/vscode-bicep/vscode-bicep.vsix ./artifacts/vscode/rad-vscode-bicep.vsix

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ./artifacts
          if-no-files-found: error

  publish:
    if: ${{ github.event_name == 'push' }}
    name: Publish to Azure Blob Storage
    needs: ["build"]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime:
          - name: windows-x64
            id: win-x64
            extension: .exe
          - name: windows-arm64
            id: win-arm64
            extension: .exe
          - name: linux-x64
            id: linux-x64
          - name: linux-arm
            id: linux-arm
          - name: linux-arm64
            id: linux-arm64
          - name: macos-x64
            id: osx-x64
          - name: macos-arm64
            id: osx-arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
          submodules: true
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: artifacts
      - name: Display artifacts
        run: ls -R
        working-directory: ./artifacts
      - uses: bacongobbler/azure-blob-storage-upload@v1.2.0
        name: Upload rad-bicep (${{ matrix.runtime.name }})
        id: upload-rad-bicep
        with:
          container_name: ${{ secrets.ASSETS_STORAGE_CONTAINER }}
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          source_dir: ./artifacts/bicep/${{ matrix.runtime.name }}/
          extra_args: "--destination-path ./bicep-extensibility/${{ env.REL_CHANNEL }}/${{ matrix.runtime.name }}/ --pattern rad-bicep${{ matrix.runtime.extension }} --overwrite true"
          sync: true
      - name: Check uploaded
        run: curl --fail https://radiuspublic.blob.core.windows.net/tools/bicep-extensibility/${{ env.REL_CHANNEL }}/${{ matrix.runtime.name }}/rad-bicep${{ matrix.runtime.extension }} -v > out

      # Only upload it once
      - uses: bacongobbler/azure-blob-storage-upload@v1.2.0
        if: ${{ matrix.runtime.name == 'linux-x64' }}
        name: Upload VS Code (channel)
        with:
          container_name: ${{ secrets.ASSETS_STORAGE_CONTAINER }}
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          source_dir: ./artifacts/vscode/
          extra_args: "--destination-path ./vscode-extensibility/${{ env.REL_CHANNEL }}/ --overwrite true"
          sync: true

      # Logic: If this is a real release (tagged, non-rc) then compare to our existing full
      # release and see if it's newer. This prevents a patch release of an older vintage from overwriting
      # a newer release
      - name: Download version marker file
        run: |
          curl https://radiuspublic.blob.core.windows.net/version/stable.txt -o current-stable.txt
        if: ${{ success() && env.UPDATE_RELEASE == 'true' }}
      - name: Get version
        id: setcurrentversion
        if: ${{ success() && env.UPDATE_RELEASE == 'true' }}
        run: echo ::set-output name=version::$(cat current-stable.txt)
      - name: Compare versions
        uses: madhead/semver-utils@latest
        if: ${{ success() && env.UPDATE_RELEASE == 'true' }}
        id: compare
        with:
          version: ${{ env.REL_VERSION }}
          compare-to: ${{ steps.setcurrentversion.outputs.version }}.0
      - name: Print info (for sanity)
        if: ${{ success() && env.UPDATE_RELEASE == 'true' }}
        run: |
          echo "current stable channel: ${{ steps.setcurrentversion.outputs.version }}"
          echo "this build channel: ${{ env.REL_CHANNEL }}"
          echo "this build version: ${{ env.REL_VERSION }}"
          echo "comparison: ${{ steps.compare.outputs.comparison-result }}"
      - uses: bacongobbler/azure-blob-storage-upload@v1.2.0
        name: Upload VS Code (stable)
        if: ${{ success() && (steps.compare.outputs.comparison-result == '>' || steps.compare.outputs.comparison-result == '=')}}
        with:
          container_name: ${{ secrets.ASSETS_STORAGE_CONTAINER }}
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          source_dir: ./artifacts/vscode/
          extra_args: "--destination-path ./vscode-extensibility/stable/ --overwrite true"
          sync: true
